

Declare @Startdate date = '2023-11-10'
DECLARE @enddate date = cast( getdate() as date)


--A/B Opportunity Group Names
--Core Refinance Web Leads Text
--Core Refinance Web Leads Text Control

--------------------------------------------------------------------------
--------------------------------------------------------------------------
--Get Test and Control Population



Drop table if exists #textbase
Select 
	LoanNumber
	, Datekey as LeadSubmittedDate
	, OpportunityGroup
	, case 
		when DATEDIFF(day, datekey, getdate()) = 0 then 'Day 0'
		when DATEDIFF(day, datekey, getdate()) = 1 then 'Day 1'
		when DATEDIFF(day, datekey, getdate()) = 2 then 'Day 2'
		when DATEDIFF(day, datekey, getdate()) = 3 then 'Day 3'
		when DATEDIFF(day, datekey, getdate()) = 4 then 'Day 4'
		when DATEDIFF(day, datekey, getdate()) = 5 then 'Day 5'
		when DATEDIFF(day, datekey, getdate()) = 6 then 'Day 6'
		when DATEDIFF(day, datekey, getdate()) = 7 then 'Day 7'
		when DATEDIFF(day, datekey, getdate()) = 8 then 'Day 8'
		when DATEDIFF(day, datekey, getdate()) = 9 then 'Day 9'
		when DATEDIFF(day, datekey, getdate()) = 10 then 'Day 10'
		when DATEDIFF(day, datekey, getdate()) = 11 then 'Day 10'
		when DATEDIFF(day, datekey, getdate()) > 11 then 'Day 11 +'
		end as leadAge

into #textbase 
FROM src.salesforce.opportunitieschangedevent
where 1=1
	and eventreason = 'Lead Submitted' 
	and opportunitygroup in ('Core Refinance Web Leads Text', 'Core Refinance Web Leads Text Control')
	and datekey between @Startdate and @enddate



--------------------------------------------------------------------------
--------------------------------------------------------------------------
--Pulling in milestone events to base population

DROP TABLE IF EXISTS #milestones
SELECT
  LID.Loannumber
, LID.LoanNumberID
, lid.LoanIdentifierDimSK
, lm.EventDateDimId
, lm.EventDateTime
, lmd.GroupName

INTO #milestones
From EDW.Loan.LoanMajorMilestoneFact LM WITH (NOLOCK)
INNER JOIN EDW.dimensions.loanmilestonedim lmd WITH (NOLOCK) on lmd.loanmilestonesk = lm.loanmilestonesk 
LEFT JOIN EDW.Dimensions.LoanIdentifierDim LID WITH (NOLOCK) ON LID.LoanIdentifierDimSK = LM.LoanIdentifierDimSK 
   and LID.IsCurrentRecordInd = 1
inner join #textbase l on l.Loannumber = LID.LoanNumber

Where 1=1
and lm.IsCurrentRecordInd = 1
and lmd.GroupID in (
                   7 --allocation
                    , 68 -- app
                    , 3 --Folder
                    , 1 -- credit
                    , 6 -- closing
                    , 110 -- Killed
                    )


--Combining milestone data with base population
DROP TABLE IF EXISTS #finalbase
select
l.*
--, Convert(Varchar,Isnull(isnull(Allocation.EventDateTime, (CASE WHEN (l.PoolEndDate = '2199-01-01 00:00:00.000') THEN NULL ELSE l.PoolEndDate END)),isnull(dateadd(day,15,l.PoolStartDate),dateadd(day,15,l.LeadCreateDate))),112) as LeadEnddateID
, cast(Allocation.EventDateTime as date) as AllocationDate
, cast(Applications.EventDateTime as date) as ApplicationDate
, cast(Folder.EventDateTime as date) as FolderDate
, cast(Credit.EventDateTime as date) as CreditDate
, cast(Closing.EventDateTime as date) as ClosingDate
, cast(Killed.EventDateTime as date) as KilledDate

into #finalbase
from #textbase l
outer apply(
            select top 1
           m.EventDateTime
            from #milestones m
            where 1=1
            and m.LoanNumber = l.LoanNumber
            and m.GroupName = 'Allocated'
            order by m.EventDateTime asc
            )Allocation

outer apply(
            select top 1
            m.EventDateTime
            from #milestones m
            where 1=1
           and m.LoanNumber = l.LoanNumber
            and m.GroupName = 'Application'
            order by m.EventDateTime asc
            )Applications
outer apply(
            select top 1
            m.EventDateTime
            from #milestones m
            where 1=1
           and m.LoanNumber = l.LoanNumber
            and m.GroupName = 'Folder'
            order by m.EventDateTime asc
            )Folder
outer apply(
            select top 1
            m.EventDateTime
            from #milestones m
            where 1=1
           and m.LoanNumber = l.LoanNumber
            and m.GroupName = 'Credit'
            order by m.EventDateTime asc
            )Credit
outer apply(
            select top 1
            m.EventDateTime
            from #milestones m
            where 1=1
           and m.LoanNumber = l.LoanNumber
            and m.GroupName = 'Closing'
            order by m.EventDateTime asc
            )Closing
outer apply(
            select top 1
            m.EventDateTime
            from #milestones m
            where 1=1
           and m.LoanNumber = l.LoanNumber
            and m.GroupName = 'Killed'
            order by m.EventDateTime asc
            )Killed
--------------------------------------------------------------------------
--------------------------------------------------------------------------
--Get all calls for test and control groups
Drop Table if exists #calls
Select 
b.LoanNumber
,b.CallStartDateTime
,b.CallEndDateTime
,b.CallEndEvent

into #calls
from Reporting.MB.CallEventRollup_BLD b
inner join #finalbase f on f.LoanNumber = b.LoanNumber

where IsFoundation = 1

--sum when each call was transferred or answered
Drop Table if exists #calls2
Select 
b.LoanNumber
, case when (sum(case when b.CallEndEvent = 'TransferComplete' then 1 else 0 end)) >0 then 1 else 0 end as TransferredFlag   ---call allocation flag
, case when (sum(case when datediff(SECOND, b.CallStartDateTime, b.CallEndDateTime) > 60 then 1 else 0 end)) > 0 then 1 else 0 end as AnswerPhoneFlag

into #calls2
from #calls b


group by b.loannumber

--------------------------------------------------------------------------

Drop Table If Exists #OHSMSStart, #OHSMSMiddle, #OHSMSFinal, #OHSMSnext, #ohsmsnextnext

select m.*
, fb.AllocationDate
Into #OHSMSStart

from src.SalesForce.OurHouseMessagingSession m
inner join #finalbase fb on fb.LoanNumber = m.loannumber_c
where 1=1 

select 
ce.conversationentry_sk 
, ce.conversationid 
, m.messagingsession_sk
, ce.entrytime
, convert(varchar, ce.entrytime, 112) AS entrydtid
, convert(time, ce.entrytime, 108) 'entryonlytime'
, DATEPART(hh, ce.entrytime) 'hour' 
, DATEPART(MM, ce.entrytime) 'minute' 
, DATEPART(SS, ce.entrytime) 'second' 
, entrytype
, ce.seq
, ce.actorname
, case when m.loannumber_c = '' Then null Else m.loannumber_c End loannumber 
  , Case When m.origin = 'TriggeredOutbound' Then 1 ELSE 0 END AS Outbound
  , Case When m.origin = 'InboundInitiated'  Then 1 ELSE 0 END AS Inbound
  , case when m.origin = 'OptOut' Then 1 ELSE 0 END AS 'Opt Out' 
, CASE WHEN m.origin = 'TriggeredOutbound' THEN 'OutBound'
       WHEN m.origin = 'InboundInitiated' THEN 'InBound'
       WHEN m.origin = 'OptOut' THEN 'Opt Out'
       ELSE m.origin END origin
, case when m.sessionownercommonid_c  = '' then null else m.sessionownercommonid_c  End sessionownercommon
, m.messagingenduserid
, m.agentmessagecount
, m.endusermessagecount
, me.name
, me.messagingenduser_sk
, m.starttime 'messagingsessionstarttime'
, m.endtime 'messagingsessionendtime'
, m.accepttime 'messagingsessionaccepttime'
, case when m.origin = 'OptOut' and seq = 1 then 1 Else 0 End 'RemoveOptSeq'


Into #OHSMSMiddle

FROM reporting.salesforce.vwOurHouseConversationEntry CE 
    inner JOIN #OHSMSStart m on m.messagingsession_sk = ce.conversationid
    LEFT JOIN reporting.SalesForce.vwOurHouseMessagingEndUser me on me.messagingenduser_sk = m.messagingenduserid
WHERE 1=1 
    AND entrytype like 'text' 
    AND m.caseid = '' -- this being populated would indicate the sms was routed to OPS
  --  AND cast(convert(varchar, ce.entrytime, 112) AS int) between @StartDateID and @EndDateID

  Drop Table if Exists #OHSMSnext

  /*Creates Text Orders for LN, # of TMs texting a loan & Removes Optout Duplicates */


  select s.*
  , Allocation.EventDateTime 'allocationdttime'
--, datediff(second, Allocation.EventDateTime, s.entrytime)*1.00 AS AllocatetoSMSdatediff
, Case When datediff(second, Allocation.EventDateTime, s.entrytime)*1.00 < 0.00 Then 1 
                                                                        Else 0 
                                                                        End OHSMSPreAllocation
    Into #OHSMSNext

  from #OHSMSMiddle s

  /*Brings in Allocation Date & Time */
  outer apply(
            select top 1
           m.EventDateTime
            from #milestones m
            where 1=1
            and m.LoanNumber = s.LoanNumber
            and m.GroupName = 'Allocated'
            
            order by m.EventDateTime asc
            )Allocation

  
  where 1=1 
  and s.RemoveOptSeq = 0


  select oh.loannumber
  , oh.conversationentry_sk 
  , oh.conversationid 
  , oh.messagingsession_sk
  , oh.name
  , oh.actorname
  , oh.entrytime
  , oh.allocationdttime
  , oh.origin
  , oh.Inbound
  , oh.Outbound
  , oh.[Opt Out]
  , ((oh.hour * 3600) + (oh.minute * 60) + (oh.second)) 'entryTimeid' 
  , ROW_NUMBER()OVER(PARTITION BY oh.loannumber ORDER BY oh.Entrytime asc) 'LoanTextOrder'
  , Rank()Over(Partition By oh.loannumber order by oh.sessionownercommon ) 'banker count'
  , min(oh.entrytime)OVER(Partition By oh.loannumber order by oh.entrytime asc) 'earliestsmsdt' 
 
 , case when oh.OHSMSPreAllocation = 0 and oh.Outbound = 1 then row_number()OVER(Partition By oh.loannumber order by oh.entrytime asc) 
                            Else Null 
                                End ResponseTime

  Into #OHSMSnextnext

  from #OHSMSNext oh

  
  Select *
  , case when ResponseTime = 1 then datediff(second, ohf.allocationdttime, ohf.entrytime) * 1.00
                                Else null
                                    End FirstOutboundPostAllocation


Into #OHSMSFinal
  from #OHSMSnextnext ohf

  select *
  from #OHSMSFinal


  /* 
  
  End of OH SMS Metrics 
  

  - add distinct client count
  -- We don't have transfer data, so we will need to figure out a good way to measure that
  -- Ask shivni about transfer data and the best way to join SFMC with OH messaging
  -- We will want to use the 'loantextorder' metric to see if we had been texting the client prior to this initiative 
  -- Additionally, we will want to use date filters to figure out our closes text after allocation or assignment.

  */ 
--------------------------------------------------------------------------

Drop table if exists #SFMCSMStotals
select
sms.LoanNumber
, case when sms.DateKey < f.AllocationDate or f.AllocationDate is null then 1 else 0 end as SFMCPreAllocationTextingFlag
, SUM(case when sms.InBound = 'True' then 1 else 0 end) as InBoundTotal
, SUM(case when sms.InBound = 'True' and  sms.MessageText not in ('Help', 'Stop') then 1 else 0 end) as InBound_exclusion_Total
, SUM(case when sms.Outbound= 'True' then 1 else 0 end) as OutboundTotal
, Case when SUM(case when se.OptOutStatusID = 1 then 1 else 0 end) > 0 then 1 else 0 end as SFMC_text_opt_out


into #SFMCSMStotals
from SRC.SFMC.SmsMessageTrackingExtractView sms
inner join #finalbase f on sms.LoanNumber = f.Loannumber
left join SRC.SFMC.SmsSubscriptionExtractView se on se.PEID = sms.PEID


where 1=1
and sms.Delivered = 'True'
and sms.datekey between '2023-11-10' and cast( (getdate() + 1) as date)
--and sms.datekey between @Startdate and @enddate
group by
 sms.LoanNumber
 , case when sms.DateKey < f.AllocationDate or f.AllocationDate is null then 1 else 0 end

 order by 
  sms.LoanNumber
 , case when sms.DateKey < f.AllocationDate or f.AllocationDate is null then 1 else 0 end


----------------------------------------

Drop table if exists #SFMCSMSInbound
select
sms.LoanNumber
,min(datekey) as Min_Inbound_Date

into #SFMCSMSInbound
from SRC.SFMC.SmsMessageTrackingExtractView sms
inner join #finalbase f on sms.LoanNumber = f.Loannumber


where 1=1
and sms.Delivered = 'True'
and sms.datekey between '2023-11-10' and cast( getdate() as date)
and sms.InBound = 'True' and  sms.MessageText not in ('Help', 'Stop') 
--and sms.datekey between @Startdate and @enddate

group by sms.loannumber

--------------------------------------------------

Drop table if exists #SFMCSMSOutbound
select
sms.LoanNumber
,min(datekey) as Min_Outbound_Date

into #SFMCSMSOutbound
from SRC.SFMC.SmsMessageTrackingExtractView sms
inner join #finalbase f on sms.LoanNumber = f.Loannumber


where 1=1
and sms.Delivered = 'True'
and sms.datekey between '2023-11-10' and cast( getdate() as date)
and sms.OutBound = 'True'
--and sms.datekey between @Startdate and @enddate

group by sms.loannumber


--------------------------------------------------------------------------
--------------------------------------------------------------------------
--aggregate metrics

--DROP TABLE if exists #finalbase2
DROP TABLE if exists bisandboxwrite.dbo.sthom_texting_metrics
SELECT
 l.LeadSubmittedDate as LeadCreateDate
, case when l.LeadSubmittedDate >= '2023-12-14' then 1 else 0 end as [Pilot Launch Date Flag]
, l.OpportunityGroup as [Opportunity Group]
, l.leadAge as [Lead Age]
, dd.[Month And Year Name] as [Lead Create Month]
, dd.MonthSK
, dd.[Week Monday Start-Begin Date] as [Week Key]
, dd.[Week Monday Start-Range Name] as [Week Range]
, CASE WHEN dd.[Business Day Flag] = 'Y'  THEN 1 ELSE 0 END  as BusDayFlag
, dd.[Business Day Flag]
, s.SFMCPreAllocationTextingFlag as [SFMC Pre-Allocation Texting Flag]
, c.TransferredFlag as [Transferred to Banker Flag]
, count(l.LoanNumber) as TotalLeads
, count(l.AllocationDate) as TotalAllocations
, count(l.ApplicationDate) as TotalApplications
, count(l.CreditDate) as TotalCredits
, count(l.FolderDate) as TotalFolders
, count(l.ClosingDate) as TotalClosings
, count(l.killeddate) as TotalWithdraws
, sum(case when l.killeddate <= l.AllocationDate then 1 else 0 end) as TotalWithdrawsSameDay
, sum(c.TransferredFlag) as TransferredSum
, sum(c.AnswerPhoneFlag) as AnsweredPhoneSum
, sum(TotalCalls.TotalCalls) as TotalCalls
, sum(s.inboundtotal) as SFMCTotalInbound
, sum(s.InBound_exclusion_Total) as SFMCTotalInboundwithexclusion
, sum(s.outboundtotal) as SFMCTotaloutbound
, sum(s.SFMC_text_opt_out) as SFMCTotalOptOut

, sum(ohsms.outbound) as OHTotalOutBound
, sum(ohsms.inbound) as OHTotalInbound
, Sum(ohsms.[Opt Out]) as OHSMSTotalOptOut
, AVG(ohsms.FirstOutboundPostAllocation / 60 ) as MinBetweenAllocationandBankerText

, sum(case when s.InboundTotal > 0 then 1 else 0 end) as Response_flag
, sum(case when s.InBound_exclusion_Total > 0 then 1 else 0 end) as Response_flag_with_exclusions
--, sum(case when s.InBoundTotal > 0 and l.allocationdate is not null then 1 else 0 end) as AllocationfromTextTotal
, Avg(DATEDIFF(MINUTE, l.allocationdate, si.Min_Inbound_Date)) as Allocation_inbound_date_diff
, Avg(DATEDIFF(Minute, so.Min_Outbound_Date, si.Min_Inbound_Date)) as Outbound_inbound_date_diff
, getdate() as RefreshDate


--into #finalbase2
into bisandboxwrite.dbo.sthom_texting_metrics
from #finalbase l
left join Semantic.Dimensions.vw_DateDim dd on dd.Date = l.LeadSubmittedDate
left join #calls2 c on c.LoanNumber = l.LoanNumber
left join #SFMCSMStotals s on s.LoanNumber = l.LoanNumber
left join #SFMCSMSInbound si on si.LoanNumber = l.LoanNumber
left join #SFMCSMSOutbound so on so.LoanNumber = l.LoanNumber
left join #OHSMSFinal ohsms on ohsms.loannumber = l.LoanNumber

outer apply(
            select
            count(d.LoanNumber) as TotalCalls
            from #calls d
            where 1=1
            and d.LoanNUmber = l.LoanNumber
            )TotalCalls


group by
l.LeadSubmittedDate
,case when l.LeadSubmittedDate < '2023-12-14' then 1 else 0 end
, l.leadAge
,l.OpportunityGroup
, dd.[Month And Year Name]
, dd.MonthSK
, dd.[Week Monday Start-Begin Date]
, dd.[Week Monday Start-Range Name]
, CASE WHEN dd.[Business Day Flag] = 'Y'    THEN 1 ELSE 0 END 
, dd.[Business Day Flag] 
, s.SFMCPreAllocationTextingFlag
, c.TransferredFlag


select top 100 * from bisandboxwrite.dbo.sthom_texting_metrics

--------------------------------------------------------------------------
--------------------------------------------------------------------------
-- Events_By_Hour


DROP TABLE IF EXISTS #hourlyAlsBase
Select 
l.*,
c.TransferredFlag,
Allocation.EventDateTime as allocation_datetime


INTO #hourlyAlsBase
From  #textbase l
left join #calls2 c on c.LoanNumber = l.LoanNumber

outer apply(
            select top 1
           m.EventDateTime
            from #milestones m
            where 1=1
            and m.LoanNumber = l.LoanNumber
            and m.GroupName = 'Allocated'
            order by m.EventDateTime asc
            )Allocation



Drop table if exists bisandboxwrite.dbo.sthom_texting_metrics_hourly
Select 
cast(h.allocation_datetime as date) as Date_of_allocation
, Datepart(hh, h.allocation_datetime) as hour
, dd.[Month And Year Name] as AllocationMonth
, dd.MonthSK
, dd.[Week Monday Start-Begin Date] as Week_key
, dd.[Week Monday Start-Range Name] as Week_Range
, CASE WHEN dd.[Business Day Flag] = 'Y'	THEN 1 ELSE 0 END  as BusDayFlag
, dd.[Business Day Flag] as BusinessDayFlag
, h.OpportunityGroup
, h.TransferredFlag
, getdate() as RefreshDate
, count(h.loannumber) as Total_allocations

into bisandboxwrite.dbo.sthom_texting_metrics_hourly
from #hourlyAlsBase h
left join Semantic.Dimensions.vw_DateDim dd on dd.Date = cast(h.allocation_datetime as date)

where h.allocation_datetime is not null

group by
cast(allocation_datetime as date)
, Datepart(hh, h.allocation_datetime)
, dd.[Month And Year Name] 
, dd.MonthSK
, dd.[Week Monday Start-Begin Date]
, dd.[Week Monday Start-Range Name] 
, CASE WHEN dd.[Business Day Flag] = 'Y'	THEN 1 ELSE 0 END 
, dd.[Business Day Flag]
, h.OpportunityGroup
, h.TransferredFlag


---------------------------------
 -----Hour client texts "text"-------------


 ---Look at this post launch; maybe add this view

Drop table if exists #textbyhour
select
f.OpportunityGroup
, c.TransferredFlag
, case when sms.DateKey < f.AllocationDate or f.AllocationDate is null then 1 else 0 end as PreAllocationTextingFlag
, sms.DateKey
, Datepart(hh, sms.CreateDateTime) as hourofmessage
, dd.[Month And Year Name] as AllocationMonth
, dd.MonthSK
, dd.[Week Monday Start-Begin Date] as Week_key
, dd.[Week Monday Start-Range Name] as Week_Range
, CASE WHEN dd.[Business Day Flag] = 'Y'	THEN 1 ELSE 0 END  as BusDayFlag
, dd.[Business Day Flag] as BusinessDayFlag
, count(sms.loannumber) as total_text_messages
 
 into #textbyhour
from SRC.SFMC.SmsMessageTrackingExtractView sms
inner join #finalbase f on sms.LoanNumber = f.Loannumber
left join Semantic.Dimensions.vw_DateDim dd on dd.Date = cast(sms.CreateDateTime as date)
left join #calls2 c on c.LoanNumber = sms.LoanNumber

where  1=1
and sms.InBound = 'True'
and sms.MessageText in ('%Text%')
and sms.Delivered = 'True'
and sms.datekey between '2023-11-10' and cast( (getdate()+1) as date)

group by
f.OpportunityGroup
, c.TransferredFlag
, case when sms.DateKey < f.AllocationDate or f.AllocationDate is null then 1 else 0 end
, sms.DateKey
, Datepart(hh, sms.CreateDateTime) 
, dd.[Month And Year Name] 
, dd.MonthSK
, dd.[Week Monday Start-Begin Date] 
, dd.[Week Monday Start-Range Name] 
, CASE WHEN dd.[Business Day Flag] = 'Y'	THEN 1 ELSE 0 END 
, dd.[Business Day Flag] 



select top 100 * from #textbyhour
